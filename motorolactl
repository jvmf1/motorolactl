#!/usr/bin/env python3
import requests
import cv2
import xmltodict
import argparse
import os

parser=argparse.ArgumentParser()
parser.add_argument('-i', required=True, metavar='ip')
parser.add_argument('-u', required=True, metavar='username')
parser.add_argument('-p', required=True, metavar='password')
parser.add_argument('--set-brightness', type=int)
parser.add_argument('--set-contrast', type=int)
parser.add_argument('--set-hue', type=int)
parser.add_argument('--set-saturation', type=int)
parser.add_argument('--set-infra-red-mode', choices=['auto','on','off'])
parser.add_argument('--set-mirror', choices=['true','false'])
parser.add_argument('--set-flip', choices=['true','false'])
parser.add_argument('--cfg-file', default='normal', choices=['normal','day','night'])
parser.add_argument('--reboot', action='store_true')
parser.add_argument('--list-display-settings', action='store_true')
parser.add_argument('--list-display-settings-caps', action='store_true')
parser.add_argument('--list-video', action='store_true')
parser.add_argument('--list-video-caps', action='store_true')
parser.add_argument('--list-device-info', action='store_true')
parser.add_argument('--list-time', action='store_true')
parser.add_argument('--list-online-users', action='store_true')
parser.add_argument('--list-users', action='store_true')
args=parser.parse_args()

session = requests.Session()
session.auth=(args.u,args.p)

try:
    h = os.get_terminal_size().lines
    w = os.get_terminal_size().columns
except:
    h=0
    w=0

separator='-'*w

def pprint(data, i=0, ignoreat=True):
    if type(data) == str:
        print('\t'*i, end='')
        print(data)
    elif type(data) == dict:
        for k, v in data.items():
            if '@xmlns' in k or '@version' in k:
                continue
            if ignoreat and '@' in k:
                continue
            print('\t'*i,end='')
            if type(v) == dict:
                print(k)
            elif type(v) == list:
                print(k)
            else:
                print(k,v)
            if not type(v) == str:
                pprint(v, i+1, ignoreat)
    elif type(data) == list:
        for v in data:
            pprint(v,i, ignoreat)

if args.reboot:
    data = xmltodict.parse(session.post(f"http://{args.i}/Reboot").text)
    print(data['config']['@status'])

if args.list_display_settings:
    print(separator)
    pprint(xmltodict.parse(session.post(f"http://{args.i}/GetImageConfigEx/1").content)['config']['image'])
    print(separator)
    exit()

if args.list_display_settings_caps:
    print(separator)
    pprint(xmltodict.parse(session.post(f"http://{args.i}/GetImageConfigEx/1").content)['config']['types'])
    print(separator)
    exit()

if args.list_device_info:
    print(separator)
    pprint(xmltodict.parse(session.post(f"http://{args.i}/GetDeviceInfo").content)['config']['deviceInfo'])
    print(separator)
    exit()

if args.list_time:
    print(separator)
    pprint(xmltodict.parse(session.post(f"http://{args.i}/GetDateAndTime").content)['config']['time'])
    print(separator)
    exit()

if args.list_video:
    data = xmltodict.parse(session.post(f"http://{args.i}/GetVideoStreamConfig").content)['config']['streams']['item']
    if type(data)!=list:
        print(separator)
        pprint(data)
        print(separator)
        exit()
    else:
        for item in data:
            print(separator)
            pprint(item)
        print(separator)
        exit()

if args.list_video_caps:
    data = xmltodict.parse(session.post(f"http://{args.i}/GetStreamCaps").content)['config']['streamList']['item']
    if type(data)!=list:
        print(separator)
        pprint(data)
        print(separator)
        exit()
    else:
        for item in data:
            print(separator)
            pprint(item)
        print(separator)
        exit()

if args.list_online_users:
    data = xmltodict.parse(session.post(f"http://{args.i}/GetVideoOnlineUser").content)['config']['videoOnlineUser']['item']
    if type(data)!=list:
        print(separator)
        pprint(data)
        print(separator)
        exit()
    else:
        for item in data:
            print(separator)
            pprint(item)
        print(separator)
        exit()

if args.list_users:
    data = xmltodict.parse(session.post(f"http://{args.i}/GetUsers").content)['config']['user']['item']
    if type(data)!=list:
        print(separator)
        pprint(data)
        print(separator)
        exit()
    else:
        for item in data:
            print(separator)
            pprint(item)
        print(separator)
        exit()

edit_image = False
edit_image_data = {'config':{'image':{}, 'cfgFile':args.cfg_file}}

if args.set_brightness or args.set_contrast or args.set_hue or args.set_saturation or args.set_infra_red_mode or args.set_mirror or args.set_flip:
    edit_image = True

if edit_image:

    if args.set_brightness:
        edit_image_data['config']['image']['bright'] = str(args.set_brightness)

    if args.set_contrast:
        edit_image_data['config']['image']['contrast'] = str(args.set_contrast)

    if args.set_hue:
        edit_image_data['config']['image']['hue'] = str(args.set_hue)

    if args.set_saturation:
        edit_image_data['config']['image']['saturation'] = str(args.set_saturation)

    if args.set_infra_red_mode:
        edit_image_data['config']['image']['InfraredMode'] = str(args.set_infra_red_mode)

    if args.set_mirror:
        edit_image_data['config']['image']['mirrorSwitch'] = str(args.set_mirror)

    if args.set_flip:
        edit_image_data['config']['image']['flipSwitch'] = str(args.set_flip)

if edit_image:
    data = xmltodict.parse(session.post(f"http://{args.i}/SetImageConfig/1",data=xmltodict.unparse(edit_image_data)).text)
    print(data['config']['@status'])
